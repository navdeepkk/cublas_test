//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.5
.target sm_75
.address_size 64

	// .globl	_Z17convertFp32ToFp16P6__halfPfi

.visible .entry _Z17convertFp32ToFp16P6__halfPfi(
	.param .u64 _Z17convertFp32ToFp16P6__halfPfi_param_0,
	.param .u64 _Z17convertFp32ToFp16P6__halfPfi_param_1,
	.param .u32 _Z17convertFp32ToFp16P6__halfPfi_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [_Z17convertFp32ToFp16P6__halfPfi_param_0];
	ld.param.u64 	%rd2, [_Z17convertFp32ToFp16P6__halfPfi_param_1];
	ld.param.u32 	%r2, [_Z17convertFp32ToFp16P6__halfPfi_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f1;}

	// inline asm
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 2;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.u16 	[%rd8], %rs1;

BB0_2:
	ret;
}

	// .globl	_Z17convertFp16ToFp32PfP6__halfi
.visible .entry _Z17convertFp16ToFp32PfP6__halfi(
	.param .u64 _Z17convertFp16ToFp32PfP6__halfi_param_0,
	.param .u64 _Z17convertFp16ToFp32PfP6__halfi_param_1,
	.param .u32 _Z17convertFp16ToFp32PfP6__halfi_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [_Z17convertFp16ToFp32PfP6__halfi_param_0];
	ld.param.u64 	%rd2, [_Z17convertFp16ToFp32PfP6__halfi_param_1];
	ld.param.u32 	%r2, [_Z17convertFp16ToFp32PfP6__halfi_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 2;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u16 	%rs1, [%rd5];
	// inline asm
	{  cvt.f32.f16 %f1, %rs1;}

	// inline asm
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB1_2:
	ret;
}


